import java_cup.runtime.*;
import java.util.ArrayList;

scan with {: return lexer.next_token(); :};

parser code {:

  public boolean syntaxErrors = false;

  private Lexer lexer;

  public Parser(Lexer lex) {
    super(lex);
    lexer = lex;
  }

  public void syntax_error(Symbol current_token) { 
    syntaxErrors = true;
    report_error(
         "Syntax error at line " + (current_token.left+1) + ", column "
+ current_token.right, null );
}

:};

// Terminals we are trying to reduce.
terminal MAIN, KBOOL, KCHAR, DICT, KINT, RATIONAL, FLOAT, TOP, SEQ, IN, TRUE, FALSE, TDEF, FDEF, VOID, ALIAS, IF, ELIF, ELSE, FORALL, WHILE, READ, PRINT, RETURN, OD, DO, FI, LEN, LESSEQUAL, MOREEQUAL, ISEQUAL, NOTEQUAL, LCURLY, RCURLY, LSQUARE, RSQUARE, EQUAL, SEMICOL, PLUS, MINUS, MULT, DIV, LESSTHAN, NOT, AND, OR, POWER, MORETHAN, DCOLON, COLON, IDENTIFIER, CHARACTER, KFLOAT, KRAT, COMMA, THEN, STRING, LPAREN, RPAREN, DOT;
terminal BADCHAR;
terminal SET, UNION, INTERSECTION, DIFFERENCE;
terminal THREAD, WAIT;
terminal LAMBDAX, ARROW;
terminal BREAK, POSINTEGER, ZERO;

nonterminal lambdaparam;
nonterminal top_level, elif, functions, statement, expr, exprs, main, func, statements, function_call, type, operator, assignment, keyvals, typedef, typeids, index, expr_no, numeric, nested_id, alias, type_void;

precedence left UNION, INTERSECTION, DIFFERENCE;
precedence left OR, AND, NOT;
precedence left ISEQUAL, NOTEQUAL, LESSTHAN, LESSEQUAL, MORETHAN, MOREEQUAL;
precedence left DCOLON;
precedence left PLUS, MINUS;
precedence left DIV, MULT;
precedence left POWER, DOT;
precedence left LPAREN, RPAREN;

/* Start Symbol we are trying to acheive */
top_level ::= functions main;

functions ::= functions func
              |
              functions assignment //globals
              |
              functions typedef
              |
              functions alias
              |
              ;

alias ::= ALIAS type_void IDENTIFIER SEMICOL;

typedef ::= TDEF IDENTIFIER LCURLY typeids RCURLY SEMICOL
            |
            TDEF IDENTIFIER LCURLY RCURLY SEMICOL;

typeids ::= type IDENTIFIER
            |
            typeids COMMA type IDENTIFIER;

main ::= MAIN LCURLY statements RCURLY SEMICOL;

func ::= FDEF type_void IDENTIFIER LPAREN typeids RPAREN LCURLY statements RCURLY SEMICOL
        |
        FDEF IDENTIFIER LPAREN typeids RPAREN LCURLY statements RCURLY SEMICOL
        |
        FDEF type_void IDENTIFIER LPAREN RPAREN LCURLY statements RCURLY SEMICOL
        |
        FDEF IDENTIFIER LPAREN RPAREN LCURLY statements RCURLY SEMICOL
        |
        FDEF type_void IDENTIFIER LPAREN RPAREN LCURLY RCURLY SEMICOL
        |
        FDEF IDENTIFIER LPAREN RPAREN LCURLY RCURLY SEMICOL
        |
        FDEF type_void IDENTIFIER LPAREN typeids RPAREN LCURLY RCURLY SEMICOL
        |
        FDEF IDENTIFIER LPAREN typeids RPAREN LCURLY RCURLY SEMICOL
        |
        LAMBDAX IDENTIFIER EQUAL lambdaparam expr SEMICOL
        |
        LAMBDAX IDENTIFIER EQUAL lambdaparam LCURLY statements RCURLY SEMICOL
        |
        LAMBDAX IDENTIFIER EQUAL UNION UNION ARROW LCURLY statements RCURLY SEMICOL
        |
        LAMBDAX IDENTIFIER EQUAL UNION UNION ARROW expr SEMICOL;

lambdaparam ::= UNION IDENTIFIER UNION ARROW | UNION IDENTIFIER UNION ARROW lambdaparam;

type_void ::= type;

type ::= KFLOAT 
        | 
        KRAT 
        |
        KBOOL
        | 
        KINT 
        | 
        KCHAR 
        | 
        DICT LESSTHAN type COMMA type MORETHAN
        | 
        DICT LESSTHAN TOP COMMA type MORETHAN
        | 
        DICT LESSTHAN type COMMA TOP MORETHAN
        |
        DICT LESSTHAN TOP COMMA TOP MORETHAN
        |
        SEQ LESSTHAN type MORETHAN
        |
        SEQ LESSTHAN TOP MORETHAN
        |
        SET LESSTHAN type MORETHAN
        |
        IDENTIFIER /*for custom types*/;

statements ::= statements statement 
              |
              statement;
    
statement ::= expr_no SEMICOL
              |
              assignment
              |
              nested_id EQUAL expr SEMICOL
              |
              nested_id index EQUAL expr SEMICOL
              |
              READ nested_id SEMICOL
              |
              PRINT expr SEMICOL
              |
              IF LPAREN expr RPAREN THEN statements FI
              |
              IF LPAREN expr RPAREN THEN statements ELSE statements FI
              |
              IF LPAREN expr RPAREN THEN statements elif ELSE statements FI
              |
              IF LPAREN expr RPAREN THEN statements elif FI
              |
              WHILE LPAREN expr RPAREN DO statements OD
              |
              FORALL LPAREN IDENTIFIER IN nested_id RPAREN DO statements OD
              |
              THREAD IDENTIFIER EQUAL LCURLY statements RCURLY SEMICOL
              |
              WAIT LPAREN IDENTIFIER RPAREN SEMICOL
              |
              BREAK POSINTEGER SEMICOL | BREAK SEMICOL
              |
              func
              |
              RETURN expr_no SEMICOL
              |
              ALIAS type type SEMICOL
              |
              typedef;

elif ::= ELIF LPAREN expr RPAREN THEN statements 
         |
         elif ELIF LPAREN expr RPAREN THEN statements;

assignment ::= type IDENTIFIER EQUAL exprs SEMICOL
              |
              type IDENTIFIER SEMICOL;

expr_no ::= expr
            |
            ;

expr ::= nested_id
        |
        numeric
        |
        CHARACTER
        |
        STRING
        |
        TRUE
        |
        FALSE
        |
        LEN LPAREN nested_id RPAREN //len()
        |
        expr operator expr
        |
        MINUS expr
        |
        NOT expr
        |
        LPAREN expr RPAREN
        |
        function_call
        |
        LSQUARE exprs RSQUARE //init sequence
        |
        LSQUARE RSQUARE
        |
        nested_id index //access index or indices in sequence
        |
        IDENTIFIER IN nested_id
        |
        LPAREN keyvals RPAREN //init dictionary
        |
        LCURLY exprs RCURLY
        |
        LPAREN RPAREN
        |
        LCURLY RCURLY;

nested_id ::= IDENTIFIER
           |
           nested_id DOT IDENTIFIER;

numeric ::= POSINTEGER
            |
            ZERO
            |
            FLOAT
            |
            RATIONAL;

index ::= LSQUARE expr RSQUARE
          |
          LSQUARE expr_no COLON expr_no RSQUARE
          |
          index LSQUARE expr RSQUARE
          |
          index LSQUARE expr_no COLON expr_no RSQUARE;

keyvals ::= expr COLON expr 
            |
            keyvals COMMA expr COLON expr;

exprs ::= expr
          |
          exprs COMMA expr;

function_call ::= IDENTIFIER LPAREN exprs RPAREN
                  |
                  IDENTIFIER LPAREN RPAREN;

operator ::= PLUS
            |
            UNION
            |
            INTERSECTION
            |
            DIFFERENCE
            |
            MINUS
            |
            MULT
            |
            DIV
            |
            ISEQUAL
            |
            NOTEQUAL
            |
            LESSEQUAL
            |
            MOREEQUAL
            |
            LESSTHAN
            |
            MORETHAN
            |
            POWER
            |
            AND
            |
            OR
            |
            DCOLON;